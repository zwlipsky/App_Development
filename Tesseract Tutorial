//
//  ViewController.swift
//
//  Created by Lyndsey Scott on 1/11/15
//  for http://www.raywenderlich.com/
//  Copyright (c) 2015 Lyndsey Scott. All rights reserved.
//

import UIKit
import Foundation

class ViewController: UIViewController, UITextViewDelegate, UINavigationControllerDelegate {
  
  @IBOutlet weak var textView: UITextView!
  @IBOutlet weak var findTextField: UITextField!
  @IBOutlet weak var replaceTextField: UITextField!
  @IBOutlet weak var topMarginConstraint: NSLayoutConstraint!
  
  var activityIndicator:UIActivityIndicatorView!
  var originalTopMargin:CGFloat!
  
  override func viewDidLoad() {
    super.viewDidLoad()
  }
  
  override func viewDidAppear(_ animated: Bool) {
    super.viewDidAppear(animated)
    
    originalTopMargin = topMarginConstraint.constant
  }
  
  @IBAction func takePhoto(_ sender: AnyObject) {

    //close keyboard and move the view field
    view.endEditing(true)
    moveViewDown()

    //create a UIAlertController with the action shet style to present a set of capture options to the user
    let imagePickerActionSheet = UIAlertController(title: "Snap/Upload Photo", message: nil, preferredStyle: .actionSheet)
    
    //If the device has a camera, add Take Photo button to imagePickerActionSheet. Selecting this button creates and presents an instance of UIImagePickerController with sourceType = .camera
    if UIImagePickerController.isSourceTypeAvailable(.camera) {
      let cameraButton = UIAlertAction(title: "Take Photo", style: .default) { (alert) -> Void in
        let imagePicker = UIImagePickerController()
        imagePicker.delegate = self
        imagePicker.sourceType = .camera
        self.present(imagePicker, animated: true, completion: nil)
      }
      imagePickerActionSheet.addAction(cameraButton)
    }
    
    //Add a Choose Existing button to imagePickerActionSheet. Selecting this button creates and presents an instance of UIImagePickerController with sourceType = .PhotoLibrary
    let libraryButton = UIAlertAction(title: "Choose Existing", style: .default) { (alert) -> Void in
      let imagePicker = UIImagePickerController()
      imagePicker.delegate = self
      imagePicker.sourceType = .photoLibrary
      self.present(imagePicker, animated: true, completion: nil)
    }
    imagePickerActionSheet.addAction(libraryButton)
    
    //Add a Cancel button to imagePickerActionSheet. Selecting this button cancels your UIImage-PickerController, even though you don't specify an action beyond setting the style as .cancel
    let cancelButton = UIAlertAction(title: "Cancel", style: .cancel) { (alert) -> Void in
    }
    imagePickerActionSheet.addAction(cancelButton)
    
    //present your instance of UIAlertController
    present(imagePickerActionSheet, animated: true, completion: nil)
    
  }
  
  
    //Modify image size while keeping aspect ratio constant to fit Tesseract requirements
    
    func scaleImage(_ image: UIImage, maxDimension: CGFloat) -> UIImage {
      
      var scaledSize = CGSize(width: maxDimension, height: maxDimension)
      var scaleFactor: CGFloat
      
      if image.size.width > image.size.height {
        scaleFactor = image.size.height / image.size.width
        scaledSize.width = maxDimension
        scaledSize.height = scaledSize.width * scaleFactor
      } else {
        scaleFactor = image.size.width / image.size.height
        scaledSize.height = maxDimension
        scaledSize.width = maxDimension * scaleFactor
      }
      
      UIGraphicsBeginImageContext(scaledSize)
      image.draw(in: CGRect(x: 0, y: 0, width: scaledSize.width, height: scaledSize.height))
      let scaledImage = UIGraphicsGetImageFromCurrentImageContext()
      UIGraphicsEndImageContext()
      
      return scaledImage!
  }


  // Activity Indicator methods
  
  func addActivityIndicator() {
    activityIndicator = UIActivityIndicatorView(frame: view.bounds)
    activityIndicator.activityIndicatorViewStyle = .whiteLarge
    activityIndicator.backgroundColor = UIColor(white: 0, alpha: 0.25)
    activityIndicator.startAnimating()
    view.addSubview(activityIndicator)
  }
  
  func removeActivityIndicator() {
    activityIndicator.removeFromSuperview()
    activityIndicator = nil
  }
  
  
  // The remaining methods handle the keyboard resignation/
  // move the view so that the first responders aren't hidden
  
  func moveViewUp() {
    if topMarginConstraint.constant != originalTopMargin {
      return
    }
    
    topMarginConstraint.constant -= 135
    UIView.animate(withDuration: 0.3, animations: { () -> Void in
      self.view.layoutIfNeeded()
    })
  }
  
  func moveViewDown() {
    if topMarginConstraint.constant == originalTopMargin {
      return
    }

    topMarginConstraint.constant = originalTopMargin
    UIView.animate(withDuration: 0.3, animations: { () -> Void in
      self.view.layoutIfNeeded()
    })

  }
  
  @IBAction func backgroundTapped(_ sender: AnyObject) {
    view.endEditing(true)
    moveViewDown()
  }
  
  
  //This part is where we call Tesseract to do its thing

  func performImageRecognition(_ image: UIImage) {
    let tesseract = G8Tesseract()
    tesseract.language = "eng+fra"
    tesseract.engineMode = .tesseractCubeCombined
    tesseract.pageSegmentationMode = .auto
    tesseract.maximumRecognitionTime = 60.0
    tesseract.image = image.g8_blackAndWhite()
    tesseract.recognize()
    textView.text = tesseract.recognizedText
    textView.isEditable = true
    removeActivityIndicator()
  }
  
}

extension ViewController: UITextFieldDelegate {
  func textFieldDidBeginEditing(_ textField: UITextField) {
    moveViewUp()
  }
  
  @IBAction func textFieldEndEditing(_ sender: AnyObject) {
    view.endEditing(true)
    moveViewDown()
  }
  
  func textViewDidBeginEditing(_ textView: UITextView) {
    moveViewDown()
  }
}

extension ViewController: UIImagePickerControllerDelegate {
  func imagePickerController(_ picker: UIImagePickerController,
  didFinishPickingMediaWithInfo info: [String : AnyObject]) {
    let selectedPhoto = info[UIImagePickerControllerOriginalImage] as! UIImage
    let scaledImage = scaleImage(selectedPhoto, maxDimension: 640)
  
  addActivityIndicator()
  
  dismiss(animated: true, completion: {
  self.performImageRecognition(scaledImage)
  })
  }
}
